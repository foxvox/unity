
UTF-8과 UTF-16은 문화권에 따라서 선호도가 달라진다. 
알파벳을 사용하는 쪽에서는 UTF-8을 선호하는 경향이 있다. 

왜냐하면 ASCII와 그대로 호환되기 때문이고, 알파벳은 1바이트만을 
차지하기 때문에 절약도 되기 때문이다. 

우리나라의 경우 한글은 UTF-8에서 3바이트를 차지하므로 
UTF-16에 비해 효율이 좋지 못한 편이다. 
그 뿐 아니라 UTF-8은 글자를 셀 경우 각 글자마다 바이트 크기가 다르기 때문에 
많은 연산을 요구하게 된다. 

그에 비해서 UTF-16은 글자 하나가 2바이트이므로 
공간도 절약되고, 글자 수를 셀 경우에도 고속으로 처리할 수 있는 장점이 있긴 하다. 
그러나 이것은 한글을 많이 사용할 경우에 한정된 것이지, 실제로 프로그래밍에서 
알파벳을 위주로 작업할 경우 UTF-8이 선호될 수도 있다. 

C++는 UTF-16이나 UTF-32를 지원하는 데이터 타입을 제공한다. 
바로 wchar_t이다. 아쉽긴 하지만 wchar_t는 컴파일러에 따라서 UTF-16이나 UTF-32에 
대응된다. 
VC++의 경우 wchar_t는 2바이트이며 UTF-16을 지원한다. 
(엄밀하게 따진다면 UCS-2를 지원하는데, UTF-16이 UCS-2를 그대로 포함하는 확장이다.)
그에 비해서 GCC의 경우 wchar_t는 4바이트로 UTF-32를 지원한다. 
무척 아쉬운 일이지만 플랫폼간 문자 타입을 통일하지는 못한 것이다. 

Wide Character를 표현하기 위해서는 L 매크로를 사용할 수 있다. 
'A'는 char타입이지만, L'A'는 wchar_t타입이다. 또한 
"ABC"는 char배열이지만 L"ABC"는 wchar_t의 배열이다. 