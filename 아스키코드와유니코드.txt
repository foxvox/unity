아스키코드 
char는 ASCII 인코딩을 사용하여 문자를 비트 상태와 대응시킨다. 
알파벳 대소문자와 숫자, 특수문자, 제어문자 등으로 이루어져 있다. 
다 합친 문자의 개수가 128개라서 7비트만 사용한다. 
즉, 맨 왼쪽 비트는 0으로 설정되어있는 것이다. 

유니코드
맨 왼쪽 비트가 1일 경우 char 2개를 묶어서 한 문자로 표현하는 방법을 
사용한 것이다. 
char 2개를 한 문자와 연결시키는 대응 방법을 코드페이지라고 부르는데, 
각 문화권에 따라서 코드페이지가 개별적으로 존재할 수밖에 없다. 
이것은 언어별 호환성에 상당한 제약을 주는 것이었고, 호환성 있는 프로그램을
제작하는데도 어려움을 안겨주었다. 그리하여 이 세상 모든 문자를 단일 코드로 
통합하려는 움직임이 나타나게 되었으며, 그로 인해서 유니코드라는 체계가 
탄생하게 되었다. 

UTF(Unicode Tranformation Format)-N
N 비트의 배수로 한 문자를 표현한다는 것이다. 
가령 UTF-8의 경우 8비트로 한 문자를 나타낼 수도 있으나, 경우에 따라서 
16비트로 한 문자를 나타내고, 부족하면 24비트로 한 문자를 나타내겠다는 
것이다. 

따라서 UTF-8에서 알파벳은 ASCII와 동일하게 1바이트만으로 표시되며
한글의 경우 한 글자가 3바이트를 차지하게 된다. 

마찬가지로 UTF-16의 경우 16비트의 배수로 한 문자를 나타내겠다는 것이다. 
따라서 알파벳이나 한글 모두 한 글자가 2바이트를 차지하지만 2바이트로 
대응할 수 없는 문자의 경우 4바이트로 표시하겠다는 것을 의미한다. 
그러나 대부분의 문자는 2바이트로 표현 가능하므로 극히 일부 고어나 옛 문자 
등이 4바이트로 대응된다. 

마지막으로 UTF-32인데 32비트 한 문자를 나타내겠다는 것으로 모든 문자에 대해서 
4바이트를 차지한다. 너무 큰 용량을 차지하기 때문에 많이 사용되고 있지는 않다. 